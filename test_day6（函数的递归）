//什么是递归 ?
//程序调用自身的编程技巧称为递归(recursion)。递归做为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复
//杂的问题层层转化为一个与原问题相似的规模较小的网题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。 
//递归的主要思考方式在于 : 把大事化小
//递归的两个必要条件****
//存在限制条件，当满足这个限制条件的时候，递归便不再继续
//每次递归调用之后越来越接近这个限制条件
#include<stdio.h>
//最简单的递归
int main()
{
	printf("hehe\n");
	main();
	return 0;
}
//栈溢出（常见），一直打印hehe，然后溢出


//接受一个整型值，按顺序打印每一位
void print(int n)
{
	if (n > 9)
	{
		print(n / 10);
	}
	printf("%d ", n % 10);
}

int main()
{
	unsigned int num = 0;
	scanf("%d", &num);//1234
	print(num);
	return 0;
}

计算字符串长度，(不包含临时变量)
 第一种创建了临时变量
int my_strlen(char* str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
//2.运用递归
int my_strlen(char* str)
{
	if (*str != '\0')
		return 1 + my_strlen(str + 1);
	else
		return 0;
}

int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);//arr是数组，传参只传了第一个元素的地址
	printf("len=%d\n", len);

	return 0;
}

//递归与迭代
//求n的阶乘。（不考虑溢出）
int Fac1(int n)//循环法
{
	int i = 0;
	int ret = 1;
	for (i = 1; i <= n; i++)
	{
		ret *= i;
	}
	return ret;
}

int Fac2(int n)//递归法
{
	if (n<=1)
	{
		return 1;
	}
	else
	{
		return n*Fac2(n-1);
	}
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	//ret = Fac1(n);
	ret = Fac2(n);
	printf("%d", ret);
	return 0;
}

菲波那切数列
1 1 2 3 5 8 13 21 34......
int Fib1(int n) //递归（不合适）重复计算度太高
{
	if (n <= 2)
		return 1;
	else
	{
		return Fib1(n - 1) + Fib1(n - 2); 
	}
}

int Fib2(int n) //循环
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n>2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret =0;
	scanf("%d", &n);
	//ret = Fib1(n);
	ret = Fib2(n);
	printf("%d\n", ret);
	return 0;
}

