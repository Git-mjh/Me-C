//循环与分支的练习
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>

//求n阶乘
int main()
{
	int a = 0;
	int n = 0;
	int s = 1;
	scanf("%d", &n);//不用写\n
	for (a = 1; a <= n; a++)
	{
		s = s * a;
	}
	printf("s=%d\n", s);
	return 0;
}

//1!+2!+3!+....+10!
int main()
{
	int a = 0;
	int n = 0;
	int s = 1;
	int sum = 0;
	for(n=1;n<=10;n++)
	{
			s = s * n;
		sum = sum + s;
	}
	
	printf("sum=%d\n", sum);
	return 0;
}


3.在一个有序数组中查找具体的某个数字n。
编写int binsearch(int x, int vD, int n); 功能:在v[0]<= v[1] <= v[2] <= .... <= v[n-1]的数组中查找x.
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 11;
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i <= sz; i++)
	{
		if (k == arr[i])
		{
			printf("找到了，下标是%d\n", i);
			break;
		}
		if(i==sz)
			printf("抱歉，无此参数");
	}
	return 0;
}
以上方法有些笨，效率低，下面是比较好的算法（二分查找）：
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);//计算元素个数
	int left = 0;//左下标
	int right = sz - 1;//右下标
	while (left<=right)
	
	{
		int mid = (left + right) / 2;
		if (arr[mid] > k)
		{
			right = mid - 1;
		}
		if (arr[mid] < k)
			left = mid + 1;
		else
		{
			printf("找到了，下标是%d\n", mid);
			break;
		}

	}
	if (left > right)
		printf("找不到了");
	return 0;
}


//多个字符从两端移动向中间汇聚*例如welcome to bit！！！！
int main()
{
	char arr1[] = "welcome to bit!!!!!!!";
	char arr2[] = "#####################";
	int right = strlen(arr1) - 1;
	int left = 0;
	while (left<=right)
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right];
		printf("%s\n", arr2);
		Sleep(1000);//休息一秒
		system("cls");//清屏
		left++;
		right--;
	}
	return 0;
}

//密码题
int main()
{
	int i = 0;
	char password[20] = { 0 };
	for (i = 0; i <3; i++)
	{
		printf("请输入密码：>");
		scanf("%s", password);
		if (strcmp(password,"123456" )== 0)//==不能用来比较两个字符串是否相等，应用库函数strcmp
		{
			printf("登录成功！");
			break;
		}
		else
		{
			printf("请重新输入");
		}
	}
	return 0;
}


int main()
{
	int func(int a);
	{
		int b;
		int a = 1;
		switch (a)
		{
		case 1:b = 30;
		case 2:b = 20;
		case 3:b = 16;
		default:b = 0;
			break;
		}
		return b;
	}
	
}

//写代码三个数从大到小输出
int main()
{
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d%d%d", &a, &b, &c);
	if (a < b)
	{
		int tmp = a;
		a = b;
		b = tmp;
	}
		
	if (a < c)
	{
		int tmp = a;
		a = c;
		c = tmp;
	}
	if (b < c)
	{
		int tmp = b;
		b = c;
		c = tmp;
	}
	printf("%d %d %d\n", &a, &b, &c);

	return 0;
}


//求3的倍数
int main()
{
	int i = 0;
	for (i = 1; i <= 100; i++)
	{
		if (i % 3 == 0)
			printf("%d\n", i);
	}
	return 0;
}

//给定两数，求最大公约数（辗转相除）***
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d%d", &a,&b);
	while (a%b)
	{
		int r = a % b;
		a = b;
		b = r;
	}
	printf("%d", b);
	return 0;
}

//打印闰年（1000年-2000年之间）***
int main()
{
	int y = 0;
	for (y = 1000; y <= 2000; y++)

	{
		/*判断是否为闰年：
			能被4整除，不能被100整除；能被400整除*/
		if (y % 4 == 0 && y % 100 != 0)
		{
			printf("%d ", y);
		}
		else if (y % 400 == 0)
			printf("%d ", y);
	}
	return 0;
}


//打印素数（100-200）
 1.试除法（比较差）
int main()
{
	int i = 0;
	int j = 0;
	for (i = 100; i <= 200; i++)
	{
		for (j = 2; j < i; j++)
		{
			if (i % j == 0)
			{
				break;
			}
		}
		if (i == j)
			printf("%d ", i);
	}
	return 0;
}

//2.  （i=a*b，a，b中至少有一个小于等于开平方i  sqrt()开平方的数学库函数
#include<math.h>
int main()
{
	int i = 0;
	int j = 0;
	for (i = 100; i <= 200; i++)
	{
		for (j = 2; j <=sqrt(i); j++)
		{
			if (i % j == 0)
			{
				break;
			}
		}
		if (j>sqrt(i))
			printf("%d ", i);
	}
	return 0;
}


//1-100所有整数中出现多少个数字9
int main()
{
	int i = 0;
	int count = 0;
	for ( i = 0; i <=100; i++)
	{
		if (i % 10 == 9)
			count++;
		if (i / 10 == 9)  //不能是else if 对于99的话有两个9
			count++;
	}
	printf("count=%d\n",count);
	return 0;
}

//计算分数（加减交替）
int main()
{
	int i = 0;
	int flag = 1;
	double sum = 0.0;
	for (i = 1; i <= 100; i++)
	{
		sum += flag * 1.0 / i;
		flag = -flag;
	}
	printf("%lf\n", sum);
	return 0;
}

//求最大值（10个整数当中）
int main()
{
	int arr[] = { -1,-2,-3,-4,-5,-6,-7,-8,-9,-10 };
	int max =arr[0];//最好不确定某个数，用数组
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for ( i = 0; i < sz; i++)
	{
		if (arr[i] > max)
			max = arr[i];
	}
	printf("max=%d", max);
	return 0;
}
