#include<stdio.h>

int main()
{
	int a = 10;
	int* p = &a;//p是一个指针变量
	return 0;
}


//指针类型决定了指针进行解引用操作的时候，能够访问空间的大小
//int* p *p能够访问4个字节
//char*p;*p 能够访问1个字节
//double* p; *p 能够访问8个字节
int main()
{
	//printf("%d\n", sizeof(char*));
	//printf("%d\n", sizeof(int*));
	//printf("%d\n", sizeof(float*));
	//printf("%d\n", sizeof(short*));
	//printf("%d\n", sizeof(double*));
	////发现全都是8字节
	int a = 0x11223344;
	int *pa = &a;
	char* pc = &a;
	/*printf("%p\n",pa);
	printf("%p\n", pc);*/
	*pa = 0;//a中4个字节改为了0
	*pc = 0;//a中只改了第一个字节
	return 0;
}

int main()
{
	int a[10] = { 0 };
	int*p=&a;//首元素地址
	int i;
	for ( i = 0; i < 10; i++)
	{
		*(p + i) = 1;//把数组全都改为1
	}
	return 0;
}

//野指针
int main()
{
	int a;//无初始化，随机值
	int* p;//野指针
	return 0;
}
2.越界也是野指针
3.指针指向的空间释放

int main()
{
	int* p = NULL;//暂时不知道付给谁，null用来初始化，暂时不能访问
	return 0;
}


int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int* p = &arr;//
	int i;
	for ( i = 0; i < sz; i++)
	{
		printf("%d\n", *p);
		p += 1;
	}
	return 0;
}

////指针减指针（得到的是中间的元素个数）
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	printf("%d\n", &arr[9] - &arr[3]);
//	return 0;
//}
//应用
int my_strlen(char* str)
{
	char* strat = str;
	char* end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - strat;
}
int main()
{
	char a[] = "bit";
	int len = my_strlen(a);
	printf("%d\n", len);
	return 0;
}


//指针和数组
int main()
{
	char a[10] = { 0 };
	printf("%p\n", a);
	printf("%p\n", &a[0]);
//1.&arr- &数组名 数组名不是首元素的地址-数组名表示整个数组 &数组名 取出的是整个数组的地址
//2，sizeof(arr) sizeof(数组名) - 数组名表示的整个数组- sizeof(数组名)计算的是整个数组的大小
	return 0;
}

int main()
{
	int a = 10;
	int* pa = &a;
	int** ppa = &pa;//二级指针 
	printf("%d\n", **ppa);
	return 0;
}

//指针数组---存放指针的数组
int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* arr[3] = { &a,&b,&c };//指针数组
	int i;
	for ( i = 0; i < 3; i++)
	{
		printf("%d\n", *(arr[i]));
	}

	return 0;
}
