#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

int main()
{
    int arr1[] = { 1,3,5,7,9 };
	int arr2[] = { 2,4,6,8,0 };
	int tmp = 0;
	int sz = sizeof(arr1) / sizeof(arr1[0]);
	int i;
	for ( i = 0; i < sz; i++)
	{
		tmp = arr1[i];
		arr1[i] = arr2[i];
		arr2[i] = tmp;
		
	}
	for (i = 0; i < 5; i++)
	{
		printf("%d",arr1[i]);
	}
	printf("\n");
	for (i = 0; i < 5; i++)
	{
		printf("%d", arr2[i]);
	}
	return 0;
}

//统计二进制中1的个数(补码）
 //方法1
int count_bit_one(unsigned int i)//unsigned 默认无符号数
{
	int count=0;
	while (i)
	{
		if (i % 2==1)
		{
			count++;
		} 
		i=i / 2;
	}
	return count;
}

//方法2：
int count_bit_one(int i)
{
	int count = 0;
	int j;
	for (j = 0; j < 32; j++)
	{
		if ((i >> j) & 1 == 1)
		{
			count++;
		}
	}
	return count;
}
//方法3
int count_bit_one(int i)
{
	int count = 0;
	while (i)
	{
		i = i & (i - 1);
		count++;
	}
	return count;
}
int main()
{
	int a = 15;
	int count=count_bit_one(a);
	printf("%d", count);
	return 0;
}

//打印二进制奇数位和偶数位
void print(int m)
{
	int a, b;
	printf("奇数位：\n");
	for ( a = 30; a >=0; a-=2)
	{
		printf("%d", (m >> a) & 1);
	}
	printf("\n");
	printf("偶数位：\n");
	for (a = 31; a >= 0; a -= 2)
	{
		printf("%d", (m >> a) & 1);
	}
	printf("\n");
}
int main()
{
	int m;
	scanf("%d", &m);
	print(m);
	return 0;
}

//写一个递归函数Digitsum(n)，输入一个非负整数，返回组成它的数字之和
//例如，调用Digitsum(1729)，则应该返回1 + 7 + 2 + 9，它的和是19
//输入 : 1729，输出 : 19

int Digitsum(int n)
{
	int i;
	if (n>9)
	{
		return Digitsum(n / 10) + n % 10;
	}
	else
	{
		return n;
	}
}
int main()
{
	unsigned int n;
	scanf("%d", &n);
	int ret=Digitsum(n);
	printf("%d\n", ret);
	return 0;
}
//实现n的k次方
double  Sql(int n, int k)
{
	if (k<0)
	{
		return (1.0 / Sql(n, -k));
	}
	else if (k==0)
	{
		return 1;
	}
	else
	{
		return n * Sql(n, k - 1);
	}
}
int main()
{
	int n=0;
	int k = 0;
	scanf("%d%d", &n, &k);
	double r = Sql(n, k);
	printf("r=%lf", r);
	return 0;
}
